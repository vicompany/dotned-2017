/* ==========================================================================
   Breakpoint mixins
   ========================================================================== */

/**
 * Respond-to mixin
 * Put style declarations within a media query.
 * It will try to get the media query from the $breakpoints map
 *
 * @param  {key|value} $min-width  		Media media query name or value to start from
 * @param  {key|value} [$max-width]		Optional media query name or value to end (minus 1px of 0.01em/rem/etc)
 *
 * @see {@link http://tzi.fr/css/responsive/prevent-double-breakpoint}
 *
 */

@mixin respond-to($min-width, $max-width: false) {
	$min-width: convert-breakpoint($min-width);
	$max-width: if($max-width, convert-breakpoint($max-width), false);

	@if $max-width {
		$max-width: if(unit($max-width) == 'px', $max-width - 1, $max-width - 0.01);

		@if ($min-width == 0) {
			@media (max-width: $max-width) {
				@content;
			}
		} @else {
			@media (min-width: $min-width) and (max-width: $max-width) {
				@content;
			}
		}
	} @else if ($min-width > 0) {
		@media (min-width: $min-width) {
			@content;
		}
	} @else {
		@content;
	}
}


/* Convert the breakpoint keyword to its corresponding unit (em, rem, etc)
   ========================================================================== */

@function convert-breakpoint($break, $breakpoints: $grid-breakpoints) {
	$value: false;

	@if type-of($break) == number {
		// It's already a number
		$value: $break;
	} @else if type-of($break) == string and map-has-key($breakpoints, $break) {
		// Otherwise get the value from the breakpoints map
		$value: map-get($breakpoints, $break);
	} @else {
		@warn 'Invalid $break parameter passed to @function convert-breakpoint(). Expected: valid map key or number value. Actual value: #{$break}';
	}

	@return $value;
}


/* Breakpoint sync
   ========================================================================== */

@function breakpoints-to-json($target-name, $breakpoints: $grid-breakpoints) {
	$breakpoints-json: ();
	$target-value: map-get($breakpoints, $target-name);

	@each $name, $value in $breakpoints {
		$breakpoint: '"#{$name}":{"value": "#{$value}", "active": #{$target-value >= $value}, "current": #{$target-name == $name}}';
		$breakpoints-json: append($breakpoints-json, $breakpoint, 'comma');
	}

	@return '{#{$breakpoints-json}}';
}
